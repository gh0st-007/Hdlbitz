module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); 
	
    parameter idle = 0, receiving = 1, error = 2, correct = 3;
    reg [2:0] state, next;
    reg [3:0] counter;
    reg [7:0] data;
    
    always @(*) begin
        case(state)
            idle: next = in? idle:receiving;
            receiving: next = (counter==4'd8)?(in?correct:error):receiving;
            error : next = in?idle:error;
            correct : next = in ? idle: receiving;
        endcase
    end
    
    always @(posedge clk) begin
        if(~(state==receiving)) begin
            counter<=4'b0;
        end
        else begin
            
                counter<= counter +4'd1;
                data[counter]<=in;
        end
    end
    always @(posedge clk) begin
        if(reset) state<=idle;
        else state<=next;
    end
    
    assign done = (state==correct);
    assign out_byte = data;

endmodule
