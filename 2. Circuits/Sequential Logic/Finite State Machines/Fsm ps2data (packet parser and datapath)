module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done); 
    
	parameter B1 =0, B2 =1, B3=2, done_r=3;
    reg [1:0] state, next;
    reg [23:0] hold;
    
    // State transition logic (combinational)
    always @(*) begin
        case(state)
            B1: next = in[3] ? B2:B1;
            B2 : next = B3;
            B3 : next = done_r;
            done_r: next = in[3]? B2:B1;
        endcase
    end
    // State flip-flops (sequential)
    always @(posedge clk) begin
        if(reset)
            state<= B1;
        else begin
            state<=next;
            if(state == B1 | state==done_r) hold[23:16] <= in;
            else if(state==B2) hold[15:8] <=in;
            else if(state==B3) hold[7:0] <=in;
          	end
        end
    // Output logic
    assign  done = state==done_r;
    assign out_bytes = hold;

endmodule
