module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output done
); //
	parameter start = 0, receiving = 1, pcheck = 2, stopcheck = 3, correct = 4, error =5;
    reg [2:0] state,next;
    reg [3:0] count;
    reg reset1,odd;
    parity p1(clk, reset1, in, odd);
    
    always @(*) begin
        case(state) 
            start : next = in ? start : receiving;
            receiving : next = (count ==4'd7) ? pcheck : receiving;
            pcheck : next = (odd^in) ? stopcheck : error;
            stopcheck: next = in ? correct : error;
            correct:next = in ? start : receiving;
            error : next = in ? start : error;
            default: next = start;
        endcase
    end
    always @(posedge clk) begin
        if(reset) begin
           state<=start;
            count<=5'd0;
            reset1<=1'b1;
        end
        else begin
            if(state==start) begin
                reset1 = in;
            end
            else if(state==receiving) begin
               count<=count+4'd1; 
                out_byte<={in, out_byte[7:1]};
                reset1=1'b0;
            end
            else begin 
                reset1 = 1'b1;
                count<=4'd0;
            end
            state<=next;
        end
    end
    assign done = state==correct;

endmodule
